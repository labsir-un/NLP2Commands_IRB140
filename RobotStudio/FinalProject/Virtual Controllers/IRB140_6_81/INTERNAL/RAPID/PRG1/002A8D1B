MODULE MainModule
    CONST robtarget targets{133} := [T_01, T_02, T_03, T_04, T_05, T_06, T_07, T_08, T_09, T_11, T_12, T_13, T_14, T_15, T_16, T_21, T_22, T_23, T_24, T_25, T_26, T_27, T_28, T_29, T_210, T_211, T_31, T_32, T_33, T_34, T_35, T_36, T_37, T_38, T_39, T_310, T_311, T_312, T_313, T_314, T_315, T_316, T_317, T_318, T_319, T_320, T_41, T_42, T_43, T_44, T_45, T_46, T_51, T_52, T_53, T_54, T_55, T_56, T_57, T_58, T_59, T_510, T_511, T_512, T_513, T_514, T_515, T_61, T_62, T_63, T_64, T_65, T_66, T_67, T_68, T_69, T_610, T_611, T_612, T_613, T_614, T_615, T_616, T_617, T_618, T_619, T_620, T_621, T_71, T_72, T_73, T_81, T_82, T_83, T_84, T_85, T_86, T_87, T_88, T_89, T_810, T_811, T_812, T_813, T_814, T_815, T_816, T_817, T_818, T_819, T_820, T_821, T_91, T_92, T_93, T_94, T_95, T_96, T_97, T_98, T_99, T_910, T_911, T_912, T_913, T_914, T_915, T_916, T_917, T_918, T_919, T_920, T_921];
    CONST num lenghts{10} := [8, 5, 10, 19, 5, 14, 20, 2, 20, 20];
    CONST num positions{10} := [1, 10, 16, 27, 47, 53, 68, 89, 92, 113];
    CONST jointtarget jointHome := [[0, 0, 0, 0, 0, 0],[0, 0, 0, 0, 0, 0]];
    PERS tooldata VacuumGripper:=[TRUE,[[0,0,129.78],[1,0,0,0]],[1,[0,0,1],[1,0,0,0],0,0,0]];
    VAR robtarget currentPose;
    VAR jointtarget currentJoints;
    VAR socketdev serverSocket;
    VAR socketdev clientSocket;
    VAR bool isConnected := FALSE;
    VAR string data;
    VAR num X;
    VAR num Y;
    VAR num Z;
    VAR num qw;
    VAR num q1;
    VAR num q2;
    VAR num q3;
    VAR num Action;
    VAR num Value;
    VAR string valuesString{9};
    VAR bool boolString{9};
    VAR num index;
    VAR robTarget targetDraw;
    VAR robtarget goal;
    VAR num tens := -1;
    VAR num units;
    VAR num offset;
    
    CONST speeddata generalSpeed := v80;
    CONST num safeZ := 150;
    CONST num heightObjects := 100;
    CONST num safeHeight := 5;
    CONST num safeHeightObjects := heightObjects - safeHeight;
    
    FUNC bool IsReachable(robtarget pointToReach, PERS tooldata Tool, PERS wobjdata WorkObject)
      VAR bool isReachable;
      VAR jointtarget jointsCalculation;
      isReachable := TRUE;
      jointsCalculation := CalcJointT(pointToReach, Tool\Wobj:=WorkObject);
      RETURN isReachable;
      ERROR
       IF ERRNO = ERR_ROBLIMIT THEN
        isReachable := FALSE;
        TRYNEXT;
       ENDIF
    ENDFUNC
    
    PROC connection()
        SocketCreate serverSocket;
        SocketBind serverSocket, "127.0.0.1", 8000; !Simulation
        !SocketBind serverSocket, "192.168.125.1", 8000; !Real Robot
        SocketListen serverSocket;
        SocketAccept serverSocket, clientSocket, \Time := WAIT_MAX ;
        SocketSend clientSocket \str := "Success";
        SetDO DO_01, 1; !On lamp 1 -> Connected
        isConnected := TRUE;
        SetDO DO_02, 0; !Off lamp 2 -> Disconnected
        SetDO DO_03, 0; !Off lamp 3 -> Getting orders
    ENDPROC
    
    PROC disconnection()
        SocketClose clientSocket;
        SocketClose serverSocket;
        SetDO DO_01, 0; !Off lamp 1 -> Connected
        isConnected := FALSE;
        SetDO DO_02, 1; !On lamp 2 -> Disconnecter
        SetDO DO_03, 0; !Off lamp 3 -> Getting orders
        SetDO DO_04, 0; !Off vacuum
        SetDO DO_05, 1; !Off Vacuum
    ENDPROC
    
    PROC getCommands()
        SetDO DO_03, 1; !On lamp 3 -> Getting orders
        SocketReceive clientSocket \str := data \Time:= WAIT_MAX;
        valuesString := [StrPart(data, 1, 4), StrPart(data, 5, 4), StrPart(data, 9, 4), StrPart(data, 13, 12), StrPart(data, 25, 12), StrPart(data, 37, 12), StrPart(data, 49, 12), StrPart(data, 61, 1), StrPart(data, 62, 4)];
        boolString := [StrToVal(valuesString{1}, X), StrToVal(valuesString{2}, Y), StrToVal(valuesString{3}, Z), StrToVal(valuesString{4}, qw), StrToVal(valuesString{5}, q1), StrToVal(valuesString{6}, q2), StrToVal(valuesString{7}, q3), StrToVal(valuesString{8}, Action), StrToVal(valuesString{9}, Value)];
        
        goal := [[X, Y, Z],[qw, q1, q2, q3],[0, 0, 0, 0],[9E9, 9E9, 9E9, 9E9, 9E9, 9E9]]; !Create robTarget
        
        IF Action = 0 THEN !Pick
            IF Value = 2 THEN !Absolute drop
                SetDO DO_04, 0; !Off Vacuum
                SetDO DO_05, 1; !Off vacuum
            ELSE
                MoveJ goal, generalSpeed, fine, VacuumGripper; 
                currentPose := CRobT(\Tool:=VacuumGripper, \WObj:= wobj0);
                IF Value = 1 THEN !Pick element
                    SetDO DO_05, 0; !On vacuum
                    SetDO DO_04, 1; !On Vacuum
                    WaitTime(1);
                    MoveL Offs(currentPose, 0, 0, -safeHeightObjects), generalSpeed, fine, VacuumGripper;
                    WaitTime(1);
                    currentPose := CRobT(\Tool:=VacuumGripper, \WObj:= wobj0);
                    MoveL Offs(currentPose, 0, 0, 100), generalSpeed, fine, VacuumGripper;
                ELSE !Drop element
                    MoveL Offs(currentPose, 0, 0, -safeHeightObjects), generalSpeed, fine, VacuumGripper;
                    WaitTime(1);
                    SetDO DO_04, 0; !Off Vacuum
                    SetDO DO_05, 1; !Off Vacuum
                    currentPose := CRobT(\Tool:=VacuumGripper, \WObj:= wobj0);
                    MoveL Offs(currentPose, 0, 0, 100), generalSpeed, fine, VacuumGripper;
                ENDIF
            ENDIF
        ELSEIF Action = 1 THEN !Move
            currentPose := CRobT(\Tool:=VacuumGripper, \WObj:= wobj0);
            IF Value = 0 THEN !MoveJ
                IF NOT IsReachable(goal, VacuumGripper, wobj0) THEN
                    SocketSend clientSocket \str := "0"; !Send an error to client
                ELSEIF  goal.trans.z < safeZ THEN
                    SocketSend clientSocket \str := "2"; !Send an error to client
                ELSE
                    MoveJ goal, generalSpeed, z10, VacuumGripper;
                ENDIF
            ELSE !MoveL
                IF currentPose.trans.z + Z < safeZ THEN
                    SocketSend clientSocket \str := "2"; !Send an error to client
                ELSE 
                    MoveL Offs(currentPose, X, Y, Z), generalSpeed, z10, VacuumGripper;
                ENDIF
            ENDIF
        ELSEIF Action = 2 THEN !Rotate
            currentJoints := CJointT();
            currentJoints.robax.rax_6 := currentJoints.robax.rax_6 + Value;
            MoveAbsJ currentJoints, generalSpeed, z10, VacuumGripper;
        ELSEIF Action = 3 THEN !Draw
            units := Value;
            IF Value > 9 THEN
                tens := Trunc(Value/10);
                units := Value - tens*10;
            ENDIF
            IF tens <> -1 THEN
                FOR i FROM 0 TO lenghts{tens + 1} DO
                    index := positions{tens + 1} + i;
                    targetDraw := targets{index};
                    targetDraw.trans.y := targetDraw.trans.y + 70;
                    MoveJ targetDraw, v600, z10, VacuumGripper \WObj:=Board;
                ENDFOR
                tens := -1;
                currentPose := CRobT(\Tool:=VacuumGripper, \WObj:= wobj0);
                MoveJ Offs(currentPose, 0, 0, 100), v600, z100, VacuumGripper;
            ENDIF
            FOR i FROM 0 TO lenghts{units + 1} DO
                index := positions{units + 1} + i;
                targetDraw := targets{index};
                targetDraw.trans.y := targetDraw.trans.y - 70;
                MoveJ targetDraw, v600, z10, VacuumGripper \WObj:=Board;
            ENDFOR
        ENDIF
        WaitTime(2);
        SocketSend clientSocket \str := "1"; !Send order validation
    ENDPROC
    
    PROC main()
        SetDO DO_01, 0; !Off lamp 1 -> Connected
        SetDO DO_02, 1; !On lamp 2 -> Disconnected
        SetDO DO_03, 0; !Off lamp 3 -> Getting orders
        SetDO DO_04, 0; !Off vacuum
        SetDO DO_05, 1; !Off vacuum
        MoveAbsJ jointHome, generalSpeed, z10, tool0;
        WHILE TRUE DO
            IF (NOT isConnected) AND DI_01 = 1 THEN
                connection;
            ELSEIF DI_02 = 1 THEN
                disconnection;
                MoveAbsJ jointHome, generalSpeed, z10, tool0;
            ELSEIF DI_03 = 1 THEN
                SetDO DO_01, 0; !Off lamp 1 -> Connected
                SetDO DO_02, 0; !Off lamp 2 -> Disconnected
                SetDO DO_03, 0; !Off lamp 3 -> Getting orders
                SetDO DO_04, 0; !Off vacuum
                SetDO DO_05, 1; !Off vacuum
                MoveAbsJ jointHome, generalSpeed, z10, tool0;
                stop;
            ELSEIF isConnected THEN
                getCommands;
                SetDO DO_03, 0; !Off lamp 3 -> Getting orders
            ENDIF
        ENDWHILE
    ENDPROC
ENDMODULE
